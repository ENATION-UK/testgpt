FROM python:3.11-slim

# 设置代理环境变量
ARG http_proxy
ARG https_proxy
ARG all_proxy

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 修复软件源和GPG密钥问题
RUN echo 'Acquire::Check-Valid-Until "false";' > /etc/apt/apt.conf.d/99no-check-valid && \
    echo 'APT::Get::AllowUnauthenticated "true";' >> /etc/apt/apt.conf.d/99no-check-valid && \
    echo 'Acquire::AllowInsecureRepositories "true";' >> /etc/apt/apt.conf.d/99no-check-valid && \
    echo 'Acquire::AllowDowngradeToInsecureRepositories "true";' >> /etc/apt/apt.conf.d/99no-check-valid

# 清理并重新配置软件源
RUN rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/* && \
    echo "deb http://deb.debian.org/debian bookworm main" > /etc/apt/sources.list && \
    echo "deb http://deb.debian.org/debian bookworm-updates main" >> /etc/apt/sources.list && \
    echo "deb http://security.debian.org/debian-security bookworm-security main" >> /etc/apt/sources.list

    
# 安装系统依赖 - 合并所有依赖安装到一个命令中
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
    libglib2.0-0 \
    libnspr4 \
    libnss3 \
    libdbus-1-3 \
    libatk1.0-0 \
    libatspi2.0-0 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libxkbcommon0 \
    libasound2 \
    xvfb \
    # 添加缺少的依赖
    libx11-6 \
    libxcursor1 \
    libxi6 \
    libxtst6 \
    libcups2 \
    libdrm2 \
    libgtk-3-0 \
    libpango-1.0-0 \
    libcairo2 \
    libgdk-pixbuf2.0-0 \
    --no-install-recommends \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# 以root用户身份安装Playwright和浏览器 - 不使用 --with-deps
RUN pip install playwright \
    && playwright install chromium \
    && echo "=== Playwright 安装完成 ==="

# 删除这行，让 Playwright 自动找到浏览器
# ENV PLAYWRIGHT_BROWSERS_PATH=/root/.cache/ms-playwright
ENV DISPLAY=:99


# 创建数据目录并设置权限
RUN mkdir -p /app/data 

# 设置工作目录
WORKDIR /app

# 复制依赖文件
COPY pyproject.toml uv.lock ./

# 安装Python依赖
RUN pip install --no-cache-dir -e .

# 复制应用代码 - 只复制必要的文件，过滤掉 .venv 等大目录
COPY src/ ./src/
COPY run.py ./
COPY backend/start.sh ./start.sh

# 设置start.sh为可执行
RUN chmod +x ./start.sh


# 清理代理环境变量
RUN unset https_proxy http_proxy all_proxy HTTPS_PROXY HTTP_PROXY

# 暴露端口
EXPOSE 8000

# 启动命令 - 使用start.sh脚本启动
CMD ["./start.sh"]